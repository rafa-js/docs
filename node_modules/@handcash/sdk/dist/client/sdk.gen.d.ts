import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { GetCurrentUserProfileData, GetCurrentUserProfileResponses, GetPublicUserProfilesData, GetPublicUserProfilesResponses, GetPermissionsData, GetPermissionsResponses, GetExchangeRateData, GetExchangeRateResponses, GetDepositAddressData, GetDepositAddressResponses, GetBalancesData, GetBalancesResponses, GetSpendableBalancesData, GetSpendableBalancesResponses, PayData, PayResponses, GetPaymentDetailsData, GetPaymentDetailsResponses, GetItemsInventoryData, GetItemsInventoryResponses } from './types.gen.js';
export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};
export declare class Connect {
    /**
     * Get a current user profile
     */
    static getCurrentUserProfile<ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserProfileData, ThrowOnError>): import("./client/types.js").RequestResult<GetCurrentUserProfileResponses, unknown, ThrowOnError, "fields">;
    /**
     * Get user profiles
     */
    static getPublicUserProfiles<ThrowOnError extends boolean = false>(options: Options<GetPublicUserProfilesData, ThrowOnError>): import("./client/types.js").RequestResult<GetPublicUserProfilesResponses, unknown, ThrowOnError, "fields">;
    /**
     * Get users permissions
     */
    static getPermissions<ThrowOnError extends boolean = false>(options?: Options<GetPermissionsData, ThrowOnError>): import("./client/types.js").RequestResult<GetPermissionsResponses, unknown, ThrowOnError, "fields">;
    /**
     * Retrieve the BSV exchange rate in the specified currency.
     */
    static getExchangeRate<ThrowOnError extends boolean = false>(options: Options<GetExchangeRateData, ThrowOnError>): import("./client/types.js").RequestResult<GetExchangeRateResponses, unknown, ThrowOnError, "fields">;
    /**
     * Get a legacy deposit address
     */
    static getDepositAddress<ThrowOnError extends boolean = false>(options?: Options<GetDepositAddressData, ThrowOnError>): import("./client/types.js").RequestResult<GetDepositAddressResponses, unknown, ThrowOnError, "fields">;
    /**
     * Retrieve wallet balances.
     */
    static getBalances<ThrowOnError extends boolean = false>(options?: Options<GetBalancesData, ThrowOnError>): import("./client/types.js").RequestResult<GetBalancesResponses, unknown, ThrowOnError, "fields">;
    /**
     * Retrieve wallets spendable balances.
     */
    static getSpendableBalances<ThrowOnError extends boolean = false>(options?: Options<GetSpendableBalancesData, ThrowOnError>): import("./client/types.js").RequestResult<GetSpendableBalancesResponses, unknown, ThrowOnError, "fields">;
    /**
     * Make a payment
     */
    static pay<ThrowOnError extends boolean = false>(options: Options<PayData, ThrowOnError>): import("./client/types.js").RequestResult<PayResponses, unknown, ThrowOnError, "fields">;
    /**
     * Retrieve details for a specific payment.
     */
    static getPaymentDetails<ThrowOnError extends boolean = false>(options: Options<GetPaymentDetailsData, ThrowOnError>): import("./client/types.js").RequestResult<GetPaymentDetailsResponses, unknown, ThrowOnError, "fields">;
    /**
     * Get items inventory
     */
    static getItemsInventory<ThrowOnError extends boolean = false>(options: Options<GetItemsInventoryData, ThrowOnError>): import("./client/types.js").RequestResult<GetItemsInventoryResponses, unknown, ThrowOnError, "fields">;
}
//# sourceMappingURL=sdk.gen.d.ts.map